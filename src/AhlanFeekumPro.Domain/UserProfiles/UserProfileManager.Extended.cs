using AhlanFeekumPro.MobileResponses;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;
using Volo.Abp;
using Volo.Abp.BlobStoring;
using Volo.Abp.Data;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Domain.Services;
using Volo.Abp.Http;
using Volo.Abp.Identity;

namespace AhlanFeekumPro.UserProfiles
{
    public class UserProfileManager : UserProfileManagerBase
    {
        protected IIdentityUserRepository _identityUserRepository;
        protected IdentityUserManager _identityUserManager;
        protected IDataFilter _dataFilter;
        protected IBlobContainer<UserProfileContainer> _userProfileContainer;

        //<suite-custom-code-autogenerated>
        public UserProfileManager(IUserProfileRepository userProfileRepository)
            : base(userProfileRepository)
        {
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...

        public virtual async Task<MobileResponse> CreatWithDetialsAsync(string name, bool isSuperHost, string password, IFormFile profilePhoto, string roleName, string? email = null, string? phoneNumber = null, string? latitude = null, string? longitude = null, string? address = null)
        {
            MobileResponse mobileResponse = new MobileResponse();
            Check.NotNullOrWhiteSpace(name, nameof(name));

            try
            {
                string imageName = "";
                var users = await _identityUserRepository.GetListAsync();
                var existingUser = users.FirstOrDefault(u => u.Email == email);
                if (existingUser != null)
                {
                    mobileResponse.Code = 501;
                    mobileResponse.Message = "Email already exists.";
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

                var identityUser = new Volo.Abp.Identity.IdentityUser(Guid.NewGuid(), email.Split("@")[0], email);
                identityUser.Name = name;
                identityUser.Surname = name;
                string formattedPhoneNumber = phoneNumber.StartsWith("+") ? phoneNumber : "+963" + phoneNumber;
                identityUser.SetPhoneNumber(formattedPhoneNumber, false);
                Guid roleId = Guid.Parse("84840acb-9a32-4fc8-7b98-3a19d056874e");
                if (roleName.Trim() == "1")
                {
                    roleId = Guid.Parse("84840acb-9a32-4fc8-7b98-3a19d056874e");
                    identityUser.AddRole(roleId);
                }
                if (roleName.Trim() == "2")
                {
                    roleId = Guid.Parse("84840acb-9a32-4fc8-7b98-3a19d056874e");
                    identityUser.AddRole(roleId);
                }

                var result = await _identityUserManager.CreateAsync(identityUser, password, false);

                if (result.Succeeded)
                {
                    imageName = await uploadImage(profilePhoto);

                    var userProfile = new UserProfile(GuidGenerator.Create(), roleId, identityUser.Id, name, isSuperHost, email, phoneNumber, latitude, longitude, address, imageName);
                    var userProf = await _userProfileRepository.InsertAsync(userProfile);

                    var register = new RegisterResponse()
                    {
                        Id = userProf.Id,
                        Name = userProf.Name,
                        PhoneNumber = formattedPhoneNumber,
                        Email = email,
                        Latitude = latitude,
                        Longitude = longitude,
                        Address = address,
                        IsSuperHost = isSuperHost,
                        ProfilePhoto = $"{MimeTypes.MimeTypeMap.GetAttachmentPath()}/UserProfileImages/{imageName}",
                        RoleId = roleName
                    };
                    mobileResponse.Code = 200;
                    mobileResponse.Message = "SUCCESS";
                    mobileResponse.Data = register;
                    return mobileResponse;

                }
                else
                {
                    mobileResponse.Code = 501;
                    mobileResponse.Message = result.ToString();
                    mobileResponse.Data = null;
                    return mobileResponse;
                }

            }
            catch (Exception e)
            {
                mobileResponse.Code = 501;
                mobileResponse.Message = "Internal server error";
                mobileResponse.Data = null;
                return mobileResponse;
            }
        }

        private async Task<string> uploadImage(IFormFile? formFile)
        {
            if (formFile == null)
                return "default-user-profile-img.png";
            using (var stream = new MemoryStream())
            {
                formFile.CopyTo(stream);
                string imageName = $"{Guid.NewGuid().ToString("N")}{Path.GetExtension(formFile.FileName)}";
                await _userProfileContainer.SaveAsync(imageName, stream.GetAllBytes());
                return imageName;
            }
        }

    }
}